{"ast":null,"code":"const BASE_URL = \"https://notes-api.dicoding.dev/v1\";\n\nfunction getAccessToken() {\n  return localStorage.getItem(\"accessToken\");\n}\n\nfunction putAccessToken(accessToken) {\n  return localStorage.setItem(\"accessToken\", accessToken);\n}\n\nasync function fetchWithToken(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return fetch(url, { ...options,\n    headers: { ...options.headers,\n      Authorization: `Bearer ${getAccessToken()}`\n    }\n  });\n}\n\nasync function login(_ref) {\n  let {\n    email,\n    password\n  } = _ref;\n  const response = await fetch(`${BASE_URL}/login`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  const responseJson = await response.json();\n\n  if (responseJson.status !== \"success\") {\n    alert(responseJson.message);\n    return {\n      error: true,\n      data: null\n    };\n  }\n\n  return {\n    error: false,\n    data: responseJson.data\n  };\n}\n\nasync function register(_ref2) {\n  let {\n    name,\n    email,\n    password\n  } = _ref2;\n  const response = await fetch(`${BASE_URL}/register`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      name,\n      email,\n      password\n    })\n  });\n  const responseJson = await response.json();\n\n  if (responseJson.status !== \"success\") {\n    alert(responseJson.message);\n    return {\n      error: true\n    };\n  }\n\n  return {\n    error: false\n  };\n}\n\nexport { fetchWithToken, getAccessToken, register, login, putAccessToken };","map":{"version":3,"names":["BASE_URL","getAccessToken","localStorage","getItem","putAccessToken","accessToken","setItem","fetchWithToken","url","options","fetch","headers","Authorization","login","email","password","response","method","body","JSON","stringify","responseJson","json","status","alert","message","error","data","register","name"],"sources":["D:/React/project/restaurant-app/src/utils/api.jsx"],"sourcesContent":["const BASE_URL = \"https://notes-api.dicoding.dev/v1\";\r\n\r\nfunction getAccessToken() {\r\n  return localStorage.getItem(\"accessToken\");\r\n}\r\n\r\nfunction putAccessToken(accessToken) {\r\n  return localStorage.setItem(\"accessToken\", accessToken);\r\n}\r\n\r\nasync function fetchWithToken(url, options = {}) {\r\n  return fetch(url, {\r\n    ...options,\r\n    headers: {\r\n      ...options.headers,\r\n      Authorization: `Bearer ${getAccessToken()}`,\r\n    },\r\n  });\r\n}\r\n\r\nasync function login({ email, password }) {\r\n  const response = await fetch(`${BASE_URL}/login`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ email, password }),\r\n  });\r\n\r\n  const responseJson = await response.json();\r\n\r\n  if (responseJson.status !== \"success\") {\r\n    alert(responseJson.message);\r\n    return { error: true, data: null };\r\n  }\r\n\r\n  return { error: false, data: responseJson.data };\r\n}\r\n\r\nasync function register({ name, email, password }) {\r\n  const response = await fetch(`${BASE_URL}/register`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ name, email, password }),\r\n  });\r\n\r\n  const responseJson = await response.json();\r\n\r\n  if (responseJson.status !== \"success\") {\r\n    alert(responseJson.message);\r\n    return { error: true };\r\n  }\r\n\r\n  return { error: false };\r\n}\r\n\r\nexport { fetchWithToken, getAccessToken, register, login, putAccessToken };\r\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,mCAAjB;;AAEA,SAASC,cAAT,GAA0B;EACxB,OAAOC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAP;AACD;;AAED,SAASC,cAAT,CAAwBC,WAAxB,EAAqC;EACnC,OAAOH,YAAY,CAACI,OAAb,CAAqB,aAArB,EAAoCD,WAApC,CAAP;AACD;;AAED,eAAeE,cAAf,CAA8BC,GAA9B,EAAiD;EAAA,IAAdC,OAAc,uEAAJ,EAAI;EAC/C,OAAOC,KAAK,CAACF,GAAD,EAAM,EAChB,GAAGC,OADa;IAEhBE,OAAO,EAAE,EACP,GAAGF,OAAO,CAACE,OADJ;MAEPC,aAAa,EAAG,UAASX,cAAc,EAAG;IAFnC;EAFO,CAAN,CAAZ;AAOD;;AAED,eAAeY,KAAf,OAA0C;EAAA,IAArB;IAAEC,KAAF;IAASC;EAAT,CAAqB;EACxC,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAAE,GAAEV,QAAS,QAAb,EAAsB;IAChDiB,MAAM,EAAE,MADwC;IAEhDN,OAAO,EAAE;MACP,gBAAgB;IADT,CAFuC;IAKhDO,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;MAAEN,KAAF;MAASC;IAAT,CAAf;EAL0C,CAAtB,CAA5B;EAQA,MAAMM,YAAY,GAAG,MAAML,QAAQ,CAACM,IAAT,EAA3B;;EAEA,IAAID,YAAY,CAACE,MAAb,KAAwB,SAA5B,EAAuC;IACrCC,KAAK,CAACH,YAAY,CAACI,OAAd,CAAL;IACA,OAAO;MAAEC,KAAK,EAAE,IAAT;MAAeC,IAAI,EAAE;IAArB,CAAP;EACD;;EAED,OAAO;IAAED,KAAK,EAAE,KAAT;IAAgBC,IAAI,EAAEN,YAAY,CAACM;EAAnC,CAAP;AACD;;AAED,eAAeC,QAAf,QAAmD;EAAA,IAA3B;IAAEC,IAAF;IAAQf,KAAR;IAAeC;EAAf,CAA2B;EACjD,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAAE,GAAEV,QAAS,WAAb,EAAyB;IACnDiB,MAAM,EAAE,MAD2C;IAEnDN,OAAO,EAAE;MACP,gBAAgB;IADT,CAF0C;IAKnDO,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;MAAES,IAAF;MAAQf,KAAR;MAAeC;IAAf,CAAf;EAL6C,CAAzB,CAA5B;EAQA,MAAMM,YAAY,GAAG,MAAML,QAAQ,CAACM,IAAT,EAA3B;;EAEA,IAAID,YAAY,CAACE,MAAb,KAAwB,SAA5B,EAAuC;IACrCC,KAAK,CAACH,YAAY,CAACI,OAAd,CAAL;IACA,OAAO;MAAEC,KAAK,EAAE;IAAT,CAAP;EACD;;EAED,OAAO;IAAEA,KAAK,EAAE;EAAT,CAAP;AACD;;AAED,SAASnB,cAAT,EAAyBN,cAAzB,EAAyC2B,QAAzC,EAAmDf,KAAnD,EAA0DT,cAA1D"},"metadata":{},"sourceType":"module"}